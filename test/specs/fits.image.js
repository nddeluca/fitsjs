// Generated by CoffeeScript 1.3.3
(function() {
  var FITS, require;

  require = window.require;

  FITS = require("fits");

  describe("FITS Image", function() {
    beforeEach(function() {
      return this.addMatchers({
        toBeNaN: function(expected) {
          return isNaN(this.actual) === isNaN(expected);
        }
      });
    });
    it('can read a FITS image', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/m101.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        var image;
        image = fits.getDataUnit();
        image.getFrame();
        expect(image.getPixel(0, 0)).toEqual(3852);
        expect(image.getPixel(890, 0)).toEqual(4223);
        expect(image.getPixel(890, 892)).toEqual(4015);
        expect(image.getPixel(0, 892)).toEqual(3898);
        expect(image.getPixel(405, 600)).toEqual(9128);
        expect(image.getPixel(350, 782)).toEqual(4351);
        expect(image.getPixel(108, 345)).toEqual(4380);
        return expect(image.getPixel(720, 500)).toEqual(5527);
      });
    });
    it('can read image with BITPIX = 8', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/image-uint8.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        var image;
        image = fits.getDataUnit();
        image.getFrame();
        expect(image.getPixel(0, 0)).toEqual(1);
        expect(image.getPixel(50, 0)).toEqual(113);
        expect(image.getPixel(99, 0)).toEqual(63);
        expect(image.getPixel(0, 50)).toEqual(219);
        expect(image.getPixel(50, 50)).toEqual(246);
        expect(image.getPixel(99, 50)).toEqual(53);
        expect(image.getPixel(0, 99)).toEqual(187);
        expect(image.getPixel(50, 99)).toEqual(172);
        return expect(image.getPixel(99, 99)).toEqual(181);
      });
    });
    it('can read image with BITPIX = 16', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/image-int16.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        var image;
        image = fits.getDataUnit();
        image.getFrame();
        expect(image.getPixel(0, 0)).toEqual(322);
        expect(image.getPixel(50, 0)).toEqual(29219);
        expect(image.getPixel(99, 0)).toEqual(16339);
        expect(image.getPixel(0, 50)).toEqual(-9192);
        expect(image.getPixel(50, 50)).toEqual(-2214);
        expect(image.getPixel(99, 50)).toEqual(13670);
        expect(image.getPixel(0, 99)).toEqual(-17403);
        expect(image.getPixel(50, 99)).toEqual(-21201);
        return expect(image.getPixel(99, 99)).toEqual(-19013);
      });
    });
    it('can read image with BITPIX = 32', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/image-uint8.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        var image;
        image = fits.getDataUnit();
        image.getFrame();
        return console.log(image.data);
      });
    });
    return it('can read image with BITPIX = -32', function() {
      var fits, xhr;
      fits = null;
      xhr = new XMLHttpRequest();
      xhr.open('GET', 'data/image-uint8.fits');
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        return fits = new FITS.File(xhr.response);
      };
      xhr.send();
      waitsFor(function() {
        return fits != null;
      });
      return runs(function() {
        var image;
        image = fits.getDataUnit();
        image.getFrame();
        return console.log(image.data);
      });
    });
  });

}).call(this);
