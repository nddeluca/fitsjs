// Generated by CoffeeScript 1.3.3
(function() {
  var Data, Image, ImageUtils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Data = require('./fits.data');

  ImageUtils = require('./fits.image.utils');

  Image = (function(_super) {

    __extends(Image, _super);

    Image.include(ImageUtils);

    function Image(view, header) {
      this.getFrame = __bind(this.getFrame, this);

      var bytesPerNumber, i, naxis, _i,
        _this = this;
      Image.__super__.constructor.apply(this, arguments);
      naxis = header['NAXIS'];
      this.bitpix = header['BITPIX'];
      this.naxis = [];
      for (i = _i = 1; 1 <= naxis ? _i <= naxis : _i >= naxis; i = 1 <= naxis ? ++_i : --_i) {
        this.naxis.push(header["NAXIS" + i]);
      }
      this.width = header['NAXIS1'];
      this.height = header['NAXIS2'] || 1;
      bytesPerNumber = Math.abs(this.bitpix) / 8;
      this.rowByteSize = this.width * bytesPerNumber;
      this.totalRowsRead = 0;
      this.length = this.naxis.reduce(function(a, b) {
        return a * b;
      }) * bytesPerNumber;
      this.data = void 0;
      this.frame = 0;
      switch (this.bitpix) {
        case 8:
          this.arrayType = Uint8Array;
          this.accessor = function() {
            return _this.view.getUint8();
          };
          this.swapEndian = function(value) {
            return value;
          };
          break;
        case 16:
          this.arrayType = Uint16Array;
          this.accessor = function() {
            return _this.view.getInt16();
          };
          this.swapEndian = function(value) {
            return (value << 8) | (value >> 8);
          };
          break;
        case 32:
          this.arrayType = Uint32Array;
          this.accessor = function() {
            return _this.view.getInt32();
          };
          this.swapEndian = function(value) {
            value = ((value << 8) & 0xFF00FF00) | ((value >> 8) & 0xFF00FF);
            return (value << 16) | (value >> 16);
          };
          break;
        case -32:
          this.arrayType = Float32Array;
          this.accessor = function() {
            return _this.view.getFloat32();
          };
          break;
        case -64:
          this.arrayType = Float64Array;
          this.accessor = function() {
            return _this.view.getFloat64();
          };
          break;
        default:
          throw "Invalid BITPIX";
      }
    }

    Image.prototype.getRow = function() {
      var i, _i, _ref;
      this.current = this.begin + this.totalRowsRead * this.rowByteSize;
      this.view.seek(this.current);
      for (i = _i = 0, _ref = this.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.data[this.width * this.rowsRead + i] = this.accessor();
      }
      this.rowsRead += 1;
      return this.totalRowsRead += 1;
    };

    Image.prototype.getFrame = function(frame) {
      var buffer, height, index, numPixels, value, _i, _ref;
      this.frame = frame != null ? frame : this.frame;
      numPixels = this.width * this.height;
      buffer = this.view.buffer.slice(this.begin, this.begin + this.length);
      if (this.bitpix < 0) {
        if (this.data == null) {
          this.initArray(this.arrayType);
        }
        height = this.height;
        while (height--) {
          this.getRow();
        }
      } else {
        this.data = new this.arrayType(buffer);
        for (index = _i = 0, _ref = numPixels - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
          value = this.data[index];
          this.data[index] = this.swapEndian(value);
        }
      }
      this.frame += 1;
      this.rowsRead = this.totalRowsRead = this.frame * this.width;
      return this.data;
    };

    Image.prototype.seek = function(frame) {
      if (frame == null) {
        frame = 0;
      }
      if (this.naxis.length === 2) {
        this.totalRowsRead = 0;
        return this.frame = 0;
      } else {
        this.totalRowsRead = this.height * frame;
        return this.frame = this.height / this.totalRowsRead - 1;
      }
    };

    Image.prototype.isDataCube = function() {
      if (this.naxis.length > 2) {
        return true;
      } else {
        return false;
      }
    };

    return Image;

  })(Data);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Image;
  }

}).call(this);
